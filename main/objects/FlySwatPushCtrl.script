local camera = require "orthographic.camera"
local CAMERA_ID = hash('/camera')
local MSG_PUSH = hash('PUSH')
local MSG_SHOW = hash('SHOW')
local MSG_HIDE = hash('HIDE')

local SCALE_MAX = 4
local SCALE_MIN = 0.2

local RELOAD_TIME = 0.25
local COMBO_TIME = 2

function init(self)
	self.reloadTimer = nil
	self.comboTimer = nil
	self.comboLevel = 0
	go.set_position(vmath.vector3(-1000,-1000,0))
	self.checkCollisions = false
	self.flies = {}
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	
	if self.comboTimer then
		if self.comboTimer > 0 then 
			self.comboTimer = self.comboTimer - dt
		else
			self.comboTimer = nil
			self.comboLevel = 0
		end
	end
	
	if self.reloadTimer and self.reloadTimer > 0 then 
		self.reloadTimer = self.reloadTimer - dt
	elseif self.reloadTimer ~= nil then
		self.reloadTimer = nil
		go.set_position(vmath.vector3(-1000,-1000,0))
	end

	if self.checkCollisions then 
		if self.checkCollisions > 0 then 
			self.checkCollisions = self.checkCollisions - dt
		else
			local count = 0
			for k, v in pairs(self.flies) do
				count = count +1
				msg.post(v, 'KILL_FLY')
			end
			-- print("FLIES COUNT = " .. count)
			self.flies = {}
			self.checkCollisions = false
			if count > 0 then 
				local pos = go.get_position()
				pos.z = 0.6
				msg.post('main:/sound_effect_manager#sound_effect_manager', 'play_sound_effect', {sound = "slap"})
				local title = nil
				if count == 2 then 
					title = factory.create('#factory', pos)
					msg.post(title, 'SHOW_TITLE', {title = 'double_kill'})
				elseif count == 3 then 
					title = factory.create('#factory', pos)
					msg.post(title, 'SHOW_TITLE', {title = 'triple_kill'})
				end

				if self.comboTimer and title == nil then 
					title = factory.create('#factory', pos)
					msg.post(title, 'SHOW_TITLE', {title = 'combo_' .. self.comboLevel})
				end
				
				self.comboTimer = COMBO_TIME
				self.comboLevel = self.comboLevel + 1
			else 
				msg.post('main:/sound_effect_manager#sound_effect_manager', 'play_sound_effect', {sound = "fail"})
				if self.comboTimer then 
					self.comboTimer = nil
					self.comboLevel = 0
				end
			end
		end
	end
end

local MSG_TRIGGER = hash("trigger_response")
local TRIGGER_GROUP_FLY = hash('fly')
local TRIGGER_GROUP_SWAT = hash('swat')

local MSG_INCREASE = hash("INCREASE")
local MSG_DECREASE = hash("DECREASE")
local MSG_NORMAL_SCALE = hash("NORMAL_SCALE")

function on_message(self, message_id, message, sender)
	if message_id == MSG_TRIGGER then -- <2>
		if message.group == TRIGGER_GROUP_FLY and message.own_group == TRIGGER_GROUP_SWAT and message.enter then 
			self.flies[message.other_id] = message.other_id
			-- print("FLIES = " .. #self.flies)
		end
	end
	
	if message_id == MSG_SHOW then 
		msg.post("#sprite", "enable")
	end
	if message_id == MSG_HIDE then 
		msg.post("#sprite", "disable")
	end
	if message_id == MSG_INCREASE then 
		local scale = vmath.vector3(2,2,1)
		go.set_scale(scale)
	end
	if message_id == MSG_NORMAL_SCALE then 
		local scale = vmath.vector3(1,1,1)
		go.set_scale(scale)
	end
	if message_id == MSG_DECREASE then 
		local scale = vmath.vector3(0.5,0.5,1)
		go.set_scale(scale)
	end
	
	if message_id == MSG_PUSH then 
		local pos = message.pos 
		local angle = message.angle
		local dist = message.dist
		go.set_rotation(SwatManager.calculateRotation(angle))
		go.set_position(SwatManager.calculatePosition(pos, angle, dist))
		
		self.reloadTimer = RELOAD_TIME
		self.checkCollisions = 0.005
	end
	
end

function on_input(self, action_id, action)
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
