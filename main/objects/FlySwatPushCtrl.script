local camera = require "orthographic.camera"
local CAMERA_ID = hash('/camera')
local MSG_PUSH = hash('PUSH')
local MSG_SHOW = hash('SHOW')
local MSG_HIDE = hash('HIDE')

local SCALE_MAX = 4
local SCALE_MIN = 0.2

local RELOAD_TIME = 0.25

function init(self)
	self.reloadTimer = nil
	go.set_position(vmath.vector3(-1000,-1000,0))
	self.checkCollisions = false
	self.flies = {}
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	if self.reloadTimer and self.reloadTimer > 0 then 
		self.reloadTimer = self.reloadTimer - dt
	elseif self.reloadTimer ~= nil then
		self.reloadTimer = nil
		go.set_position(vmath.vector3(-1000,-1000,0))
	end

	if self.checkCollisions then 
		if self.checkCollisions > 0 then 
			self.checkCollisions = self.checkCollisions - dt
		else
			local count = 0
			for k, v in pairs(self.flies) do
				count = count +1
				msg.post(v, 'KILL_FLY')
			end
			print("FLIES COUNT = " .. count)
			self.flies = {}
			self.checkCollisions = false
			if count > 0 then 
				msg.post('main:/sound_effect_manager#sound_effect_manager', 'play_sound_effect', {sound = "slap"})
			else 
				msg.post('main:/sound_effect_manager#sound_effect_manager', 'play_sound_effect', {sound = "fail"})
			end
		end
	end
end

local MSG_TRIGGER = hash("trigger_response")
local TRIGGER_GROUP_FLY = hash('fly')
local TRIGGER_GROUP_SWAT = hash('swat')

function on_message(self, message_id, message, sender)
	if message_id == MSG_TRIGGER then -- <2>
		if message.group == TRIGGER_GROUP_FLY and message.own_group == TRIGGER_GROUP_SWAT and message.enter then 
			self.flies[message.other_id] = message.other_id
			-- print("FLIES = " .. #self.flies)
		end
	end
	
	if message_id == MSG_SHOW then 
		msg.post("#sprite", "enable")
	end
	if message_id == MSG_HIDE then 
		msg.post("#sprite", "disable")
	end
	
	if message_id == MSG_PUSH then 
		local pos = message.pos 
		local angle = message.angle
		go.set_rotation(vmath.quat_rotation_z(angle))
		angle = angle + math.rad(90)
		local dist = message.dist * 2
		local vec = vmath.vector3(dist, 0, 0)
		local rot = vmath.quat_rotation_z(angle)
		local vec2 = vmath.rotate(rot, vec)
		pos = pos + vec2
		go.set_position(pos)
		self.reloadTimer = RELOAD_TIME
		self.checkCollisions = 0.005
	end
	
end

function on_input(self, action_id, action)
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
