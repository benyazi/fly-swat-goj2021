
local SWITCH_PERK_TIME = 1.5

function init(self)
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed

	--set start position
	self.perks = PerkManager.getPerks()
	-- self.perks[1] = {
	-- 	name = 'push_increase',
	-- 	color = vmath.vector4(0.7,0,0,1)
	-- }
	-- self.perks[2] = {
	-- 	name = 'push_decrease',
	-- 	color = vmath.vector4(1,0,0,1)
	-- }
	-- self.perks[3] = {
	-- 	name = 'line_speed_increase',
	-- 	color = vmath.vector4(0,0.7,0,1)
	-- }
	-- self.perks[4] = {
	-- 	name = 'line_speed_decrease',
	-- 	color = vmath.vector4(0,1,0,1)
	-- }
	-- self.perks[5] = {
	-- 	name = 'freeze',
	-- 	color = vmath.vector4(0,0,1,1)
	-- }
	self.currentPerk = 1
	
	self.killed = false
	self.speed = 3
	self.path = {}
	self.currentPathIndex = nil

	self.prevPos = go.get_position()
	self.flipped = false

	self.switchPerkTimer = SWITCH_PERK_TIME
	
	switchPerk(self)
	generatePath(self, false)
	run(self)
	sound.play('#sound')
end

local MIX_X = -450 
local MIX_Y = -500 
local MAX_Y = 500 
local MAX_X = 450 


function generatePath(self, firstPoint)
	local i = 1
	if firstPoint ~= false then 
		self.path[i] = firstPoint
		i = i + 1
	end
	
	local pos = vmath.vector3() 
	self.path[i] = pos
end

local function fly_kill_done(self, url, property)
	destroy(self)
end

local function fly_done(self, url, property)
	if self.killed then 
		return 
	end
	self.currentPathIndex = self.currentPathIndex + 1
	if self.path[self.currentPathIndex] then 
		go.animate(go.get_id(), "position.y", go.PLAYBACK_ONCE_FORWARD, self.path[self.currentPathIndex].y, go.EASING_LINEAR, self.speed)
		go.animate(go.get_id(), "position.x", go.PLAYBACK_ONCE_FORWARD, self.path[self.currentPathIndex].x, go.EASING_LINEAR, self.speed, 0, fly_done)
	else
		self.currentPathIndex = nil
		generatePath(self)
		run(self)
	end
end

function run(self)
	self.currentPathIndex = 1
	go.animate(go.get_id(), "position.y", go.PLAYBACK_ONCE_FORWARD, self.path[self.currentPathIndex].y, go.EASING_LINEAR, self.speed)
	go.animate(go.get_id(), "position.x", go.PLAYBACK_ONCE_FORWARD, self.path[self.currentPathIndex].x, go.EASING_LINEAR, self.speed, 0, fly_done)

end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function switchPerk(self)
	rnd.seed()
	self.currentPerk = rnd.range(1, 5)
	go.set("#sprite", "tint", self.perks[self.currentPerk].color)
end

function update(self, dt)
	local pos = go.get_position()

	if self.switchPerkTimer > 0 then 
		self.switchPerkTimer = self.switchPerkTimer - dt
	else
		switchPerk(self)
		self.switchPerkTimer = SWITCH_PERK_TIME
	end
	
	if pos.x > self.prevPos.x and self.flipped == false then
		self.flipped = true 
		sprite.set_hflip('#sprite', true)
		--flip hor 
	end
	if pos.x < self.prevPos.x and self.flipped == true then
		self.flipped = false
		--flip hor 
		sprite.set_hflip('#sprite', false)
	end
	self.prevPos = pos
end

function destroy(self)
	go.delete()
end

function runAwayFromSwat(self, random)
	go.cancel_animations(go.get_id(), "position")
	self.currentPathIndex = nil
	
	local dist = 800
	local pushPos = go.get_position('/FlySwapPush')
	if random then 
		dist = 400
		pushPos.x = rnd.double_range(MIX_X, MAX_X)
		pushPos.y = rnd.double_range(MIX_Y, MAX_Y)
	end
	
	local pos = go.get_position()

	local angle = math.atan2(pos.x - pushPos.x, pushPos.y - pos.y)
	local dx = pushPos.x - pos.x
	local dy = pushPos.y - pos.y

	angle = angle - math.rad(90)
	local vec = vmath.vector3(dist, 0, 0)
	local rot = vmath.quat_rotation_z(angle)
	local vec2 = vmath.rotate(rot, vec)
	pos = pos + vec2
	generatePath(self, pos)
	run(self)
end

local MSG_TRIGGER = hash("trigger_response")
local TRIGGER_GROUP_SWAT = hash('swat')
local TRIGGER_GROUP_SWAT_SOUND = hash('swatSound')
local MSG_KILL = hash("KILL_FLY")

function on_message(self, message_id, message, sender)
	if message_id == MSG_TRIGGER then -- <2>

		if message.group == TRIGGER_GROUP_SWAT and self.killed == false then 
			-- self.killed = true
			-- sound.stop('#sound')
			-- go.cancel_animations(go.get_id(), "position")
			-- sprite.play_flipbook('#sprite', hash('FlyDied'))
			-- sprite.set_vflip('#sprite', true)
			-- go.animate(go.get_id(), "position.y", go.PLAYBACK_ONCE_FORWARD, -1000, go.EASING_LINEAR, 1.5, 0, fly_kill_done)
			-- msg.post('/FlyGenerator', 'FLY_KILLED')
		end

		if message.group == TRIGGER_GROUP_SWAT_SOUND and message.enter and self.killed == false then 
			runAwayFromSwat(self)
		end
	end
	if message_id == MSG_KILL then
		self.killed = true
		sound.stop('#sound')
		go.cancel_animations(go.get_id(), "position")
		sprite.play_flipbook('#sprite', hash('FlyDied'))
		sprite.set_vflip('#sprite', true)
		go.animate(go.get_id(), "position.y", go.PLAYBACK_ONCE_FORWARD, -1000, go.EASING_LINEAR, 1.5, 0, fly_kill_done)
		msg.post('/FlyGenerator', 'PERK_KILLED')
		PerkManager.setActivePerk(self.perks[self.currentPerk])
	end
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
