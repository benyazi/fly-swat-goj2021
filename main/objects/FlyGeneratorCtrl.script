local ACTION_GENERATE = hash('MOUSE_RIGHT')
local camera = require "orthographic.camera"
local CAMERA_ID = hash('/camera')

function init(self)
	msg.post(".", "acquire_input_focus")
	self.flyCount = 0
	self.perkCount = 0
	self.flyStart = 10
	self.perkGenerateTimer = 5

	self.waveCount = 1
	self.waveData = {}
	self.waveData[1] = {
		flies = 10
	}
	self.waveData[2] = {
		flies = 15
	}
	self.waveData[3] = {
		flies = 25
	}
	
	generateFlies(self)
end

function generateFlies(self)
	msg.post('/swatGui#Swat', 'UPDATE_WAVE', {count = self.waveCount})
	local viewport = camera.get_viewport(CAMERA_ID)
	-- pprint(viewport)
	local minX = viewport.x - viewport.z/2
	local maxX = viewport.x + viewport.z/2
	local minY = viewport.y - viewport.w/2
	local maxY = viewport.y + viewport.w/2
	-- print('' .. x .. ' - '.. y.. ' - '..w.. ' - '..h ..'')
	-- pprint(self.waveData)
	for i = 1, self.waveData[self.waveCount].flies do
		rnd.seed()
		local pos = vmath.vector3()
		pos.x = rnd.double_range(minX, maxX)
		pos.y = rnd.double_range(minY, maxY)
		pos.z = 0.1
		local fly = factory.create('#factory', pos)		
		updateFlyCount(self, 1)
	end
end

function generatePerk(self)
	if self.perkCount > 5 then 
		return
	end
	local viewport = camera.get_viewport(CAMERA_ID)
	-- pprint(viewport)
	local minX = viewport.x - viewport.z/2
	local maxX = viewport.x + viewport.z/2
	local minY = viewport.y - viewport.w/2
	local maxY = viewport.y + viewport.w/2
	rnd.seed()
	local pos = vmath.vector3()
	pos.x = rnd.double_range(minX, maxX)
	pos.y = rnd.double_range(minY, maxY)
	pos.z = 0.1
	local fly = factory.create('#factoryPerk', pos)	
	self.perkCount = self.perkCount + 1
end

function newWave(self)
	self.waveCount = self.waveCount + 1
	if self.waveData[self.waveCount] then 
		generateFlies(self)
	else
		-- DONE
	end
end

function updateFlyCount(self, diff)
	self.flyCount =  self.flyCount + diff
	msg.post('/swatGui#Swat', 'UPDATE_FLY_COUNT', {count = self.flyCount})

	if self.flyCount <= 0 then 
		newWave(self)
	end
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	if self.perkGenerateTimer > 0 then 
		self.perkGenerateTimer = self.perkGenerateTimer - dt
	else
		self.perkGenerateTimer = 5
		generatePerk(self)
	end
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

local MSG_FLY_KILLED = hash('FLY_KILLED')
local MSG_PERK_KILLED = hash('PERK_KILLED')

function on_message(self, message_id, message, sender)
	if message_id == MSG_FLY_KILLED then 
		updateFlyCount(self, -1)
	end
	if message_id == MSG_PERK_KILLED then 
		self.perkCount = self.perkCount - 1
	end
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- if action_id == ACTION_GENERATE and action.pressed then 
	-- 	local coord = vmath.vector3(action.x, action.y, 0)
	-- 	local pos = camera.screen_to_world(CAMERA_ID, coord)
	-- 	factory.create('#factory', pos)
	-- 	updateFlyCount(self, 1)
	-- end
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
