function init(self)
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
	self.killed = false
	self.speed = 200
	self.path = {}
	self.currentPathIndex = nil
	self.home = nil

	self.prevPos = go.get_position()
	self.flipped = false

	self.unEaterTimer = nil
	
	self.target = nil
	self.targetOffset = vmath.vector3()

	generatePath(self, false)
	run(self)
	sound.play('#sound')
end

local MIX_X = -450 
local MIX_Y = -500 
local MAX_Y = 500 
local MAX_X = 450 

function generatePath(self, firstPoint)

	local minX, maxX, minY, maxY = DataManager.getBorders()
	for i = 1, 5 do 
		local pos = vmath.vector3() 
		if i < 2 and firstPoint then 
			pos = firstPoint -- vmath.vector3()
			-- local pos = firstPoint
		else
			rnd.seed()
			pos.x = rnd.double_range(minX, maxX)
			pos.y = rnd.double_range(minY, maxY)
		end
		self.path[i] = pos
	end
end

local function fly_kill_done(self, url, property)
	destroy(self)
end

local function calculateTime(self, targetPos)
	local pos = go.get_position()
	local dx = targetPos.x - pos.x
	local dy = targetPos.y - pos.y
	local dist = math.sqrt( dx * dx + dy * dy )
	return (dist / self.speed) * DataManager.getFlySpeed()
end

local function fly_done(self, url, property)
	if self.killed then 
		return 
	end
	self.currentPathIndex = self.currentPathIndex + 1
	if self.path[self.currentPathIndex] then 
		local time = calculateTime(self, self.path[self.currentPathIndex])
		go.animate(go.get_id(), "position.y", go.PLAYBACK_ONCE_FORWARD, self.path[self.currentPathIndex].y, go.EASING_LINEAR, time)
		go.animate(go.get_id(), "position.x", go.PLAYBACK_ONCE_FORWARD, self.path[self.currentPathIndex].x, go.EASING_LINEAR, time, 0, fly_done)
	else
		self.currentPathIndex = nil
		generatePath(self)
		run(self)
	end
end

function run(self)
	self.currentPathIndex = 1
	local time = calculateTime(self, self.path[self.currentPathIndex])
	go.animate(go.get_id(), "position.y", go.PLAYBACK_ONCE_FORWARD, self.path[self.currentPathIndex].y, go.EASING_LINEAR, time)
	go.animate(go.get_id(), "position.x", go.PLAYBACK_ONCE_FORWARD, self.path[self.currentPathIndex].x, go.EASING_LINEAR, time, 0, fly_done)

end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	local pos = go.get_position()

	if self.target then 
		local otherPos = go.get_position(self.target)
		pos = otherPos + self.targetOffset
		go.set_position(pos) 
	end
	
	if pos.x > self.prevPos.x and self.flipped == false then
		self.flipped = true 
		sprite.set_hflip('#sprite', true)
		--flip hor 
	end
	if pos.x < self.prevPos.x and self.flipped == true then
		self.flipped = false
		--flip hor 
		sprite.set_hflip('#sprite', false)
	end
	self.prevPos = pos

	if self.unEaterTimer ~= nil then 
		if self.unEaterTimer > 0 then 
			self.unEaterTimer = self.unEaterTimer - dt
		else
			self.unEaterTimer = nil
		end
	end
end

function destroy(self)
	go.delete()
end

function runAwayFromSwat(self, random)
	self.target = nil 
	self.targetOffset = vmath.vector3()
	self.unEaterTimer = 2
	go.cancel_animations(go.get_id(), "position")
	self.currentPathIndex = nil
	
	local pos = go.get_position()
	pos = SwatManager.calculateRunAway(pos)
	generatePath(self, pos)
	run(self)
end

function eatJam(self, other_id)
	self.target = other_id 
	local otherPos = go.get_position(other_id)	
	local pos = go.get_position()
	self.targetOffset = pos - otherPos 
	
	go.cancel_animations(go.get_id(), "position")
	self.currentPathIndex = nil	
end

local MSG_TRIGGER = hash("trigger_response")
local TRIGGER_GROUP_SWAT = hash('swat')
local TRIGGER_GROUP_SWAT_SOUND = hash('swatSound')
local TRIGGER_GROUP_JAM = hash('jam')
local MSG_KILL = hash("KILL_FLY")
local MSG_FOOD_REMOVED = hash('FOOD_REMOVED')
local MSG_SET_HOME = hash('SET_HOME')

function on_message(self, message_id, message, sender)
	if message_id == MSG_TRIGGER then -- <2>

		if message.group == TRIGGER_GROUP_SWAT and self.killed == false then 
			-- self.killed = true
			-- sound.stop('#sound')
			-- go.cancel_animations(go.get_id(), "position")
			-- sprite.play_flipbook('#sprite', hash('FlyDied'))
			-- sprite.set_vflip('#sprite', true)
			-- go.animate(go.get_id(), "position.y", go.PLAYBACK_ONCE_FORWARD, -1000, go.EASING_LINEAR, 1.5, 0, fly_kill_done)
			-- msg.post('/FlyGenerator', 'FLY_KILLED')
		end

		if message.group == TRIGGER_GROUP_SWAT_SOUND and message.enter and self.killed == false then 
			runAwayFromSwat(self)
		end

		if message.group == TRIGGER_GROUP_JAM and message.enter and self.killed == false and self.unEaterTimer == nil then 
			eatJam(self, message.other_id)
		end
	end
	if message_id == MSG_KILL then
		ScoreManager.addKill()
		if self.home then 
			msg.post(self.home, 'DEAR_FLY_KILLED')
		end
		self.killed = true
		sound.stop('#sound')
		go.cancel_animations(go.get_id(), "position")

		local flyDied = factory.create('#factory', go.get_position())
		destroy(self)
		-- sprite.play_flipbook('#sprite', hash('Fly2Died'))
		-- sprite.set_vflip('#sprite', true)
		-- go.animate(go.get_id(), "position.y", go.PLAYBACK_ONCE_FORWARD, -1000, go.EASING_LINEAR, 1.5, 0, fly_kill_done)
		-- msg.post('/FlyGenerator', 'FLY_KILLED')
	end
	if message_id == MSG_FOOD_REMOVED then
		runAwayFromSwat(self, true)
	end
	if message_id == MSG_SET_HOME then
		self.home = message.home
	end
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
