function init(self)
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
	self.killed = false
	self.state = 1
	self.fullState = 6
	self.foodType = 'jam'
	self.directionIndex = 0
	self.directions = {}
	self.speed = 50
	
	self.eatedLevel = 100
	self.flyCount = 0
	self.flies = {}
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	local vec = getActiveDirection(self)
	local pos = go.get_position()
	pos = pos + vec * self.speed * dt 
	go.set_position(pos)

	if self.flyCount > 0 and self.eatedLevel > 0 then 
		self.eatedLevel = self.eatedLevel - 5 * dt * self.flyCount
	end
end

function damage(self)
	if self.killed then 
		return
	end
	self.state = self.state + 1
	if self.state < self.fullState then 
		sprite.play_flipbook('#sprite', hash(self.foodType .. '_' .. self.state))
	else
		self.killed = true
		destroy(self)
	end
end

function destroy(self)
	go.delete()
end


function setDirection(self, other_id)
	-- local rotation = go.get_rotation(other_id)
	local rot = go.get(other_id, "euler.z")
	-- pprint(rot)
	local dir = vmath.vector3(0, -1, 0)
	if rot == 90 then 
		dir = vmath.vector3(1, 0, 0)
	elseif rot == -90 then 
		dir = vmath.vector3(-1, 0, 0)
	elseif rot == 180 then 
		dir = vmath.vector3(0, 1, 0)
	end
	self.directionIndex = self.directionIndex + 1
	self.directions[self.directionIndex] = {
		dir = dir,
		id = other_id,
		active = true
	}
end

function getActiveDirection(self)
	for k, v in pairs(self.directions) do
		if v.active then 
			return self.directions[k].dir
		end
	end
	return vmath.vector3()
end

function setDirectionUnactive(self, other_id)
	for k, v in pairs(self.directions) do
		if v.id == other_id and v.active then 
			self.directions[k].active = false
		end
	end
end

local MSG_TRIGGER = hash("trigger_response")
local MSG_CHANGE_TYPE = hash("CHANGE_TYPE")
local TRIGGER_GROUP_SWAT = hash('swat')
local TRIGGER_GROUP_FOOD = hash('food')
local TRIGGER_GROUP_LINE = hash('line')
local TRIGGER_GROUP_FOOD_DONE = hash('food_done')
local TRIGGER_GROUP_FLY = hash('fly')

function on_message(self, message_id, message, sender)
	if message_id == MSG_TRIGGER then -- <2>
		
		if message.group == TRIGGER_GROUP_SWAT and message.enter then
			damage(self) 
		end
		
		if message.group == TRIGGER_GROUP_FLY and message.enter then
			self.flyCount = self.flyCount + 1
			self.flies[message.other_id] = message.other_id
		end
		
		if message.group == TRIGGER_GROUP_FLY and message.enter == false then
			self.flyCount = self.flyCount - 1
			if self.flies[message.other_id] then 
				self.flies[message.other_id] = nil
			end
		end

		if message.group == TRIGGER_GROUP_LINE and message.own_group == TRIGGER_GROUP_FOOD and message.enter then
			setDirection(self, message.other_id)
		end

		if message.group == TRIGGER_GROUP_LINE and message.own_group == TRIGGER_GROUP_FOOD and message.enter == false then
			setDirectionUnactive(self, message.other_id)
		end

		if message.group == TRIGGER_GROUP_FOOD_DONE and message.own_group == TRIGGER_GROUP_FOOD and message.enter then
			foodDone(self)
		end

	end
	if message_id == MSG_CHANGE_TYPE then 
		self.foodType = message.foodType
		self.fullState = message.fullState
		sprite.play_flipbook('#sprite', hash(self.foodType .. '_' .. self.state))
	end
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function foodDone(self)
	local data = {
		eaterLevel = self.eatedLevel,
		state = self.state
	}
	-- print("DONE")
	-- pprint(data)
	
	DataManager.foodDone(data)
	for k, v in pairs(self.flies) do
		msg.post(v, 'FOOD_REMOVED')
	end
	destroy(self)
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
