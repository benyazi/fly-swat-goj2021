local camera = require "orthographic.camera"
local CAMERA_ID = hash('/camera')
local ACTION_TOUCH = hash('touch')

function init(self)
	msg.post(".", "acquire_input_focus")
	self.swatPoint = gui.get_node('swatPoint')
	self.startPoint = vmath.vector3()
	self.finishPoint = vmath.vector3()
	self.mousePosition = vmath.vector3()
	self.calculateStarted = false

	self.reloadTimer = nil 
	local pos = gui.get_position(self.swatPoint)
	pos.z = 0 
	msg.post('/FlySwapForce', 'HIDE')
	msg.post('/FlySwapForce', 'SET_POSITION', {pos =  camera.screen_to_world(CAMERA_ID, pos)})
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	
	if self.calculateStarted then 
		local angle = math.atan2(self.mousePosition.x - self.startPoint.x, self.startPoint.y - self.mousePosition.y)
		local dx = self.startPoint.x - self.mousePosition.x
		local dy = self.startPoint.y - self.mousePosition.y
		local dist = math.sqrt(dx*dx+dy*dy)
		
		-- print('ANGLE = ' .. angle .. ' dist = ' .. dist)
		msg.post('/FlySwapForce', 'UPDATE_ROTATION', {angle = angle, dist = dist})
	end
end

local MSG_UPDATE_FLY_COUNT = hash('UPDATE_FLY_COUNT')

function on_message(self, message_id, message, sender)
	if message_id == MSG_UPDATE_FLY_COUNT then 
		local node = gui.get_node('flyCount')
		gui.set_text(node, message.count)
	end
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function releaseMouse(self)
	msg.post('/FlySwapForce', 'HIDE')
	
	local angle = math.atan2(self.mousePosition.x - self.startPoint.x, self.startPoint.y - self.mousePosition.y)
	local dx = self.startPoint.x - self.mousePosition.x
	local dy = self.startPoint.y - self.mousePosition.y
	local dist = math.sqrt(dx*dx+dy*dy)

	print('ANGLE = ' .. angle .. ' dist = ' .. dist)
	msg.post('/FlySwapPush', 'PUSH',  {
		start = self.startPoint,
		finish = self.finishPoint,
		angle = angle, 
		dist = dist, 
		pos = self.startPoint
	})
end
local ACTION_GENERATE = hash('MOUSE_RIGHT')
function on_input(self, action_id, action)
	local coord = vmath.vector3(action.x, action.y, 0)
	-- coord = vmath.vector3(action.screen_x, action.screen_y, 0)
	self.mousePosition = camera.screen_to_world(CAMERA_ID, coord)
	-- print('x = ' .. self.mousePosition.x .. ' y = ' .. self.mousePosition.y)

	if action_id == ACTION_TOUCH and self.reloadTimer == nil then 
		if action.pressed and gui.pick_node(self.swatPoint, action.x, action.y) then 
			print('PRESSED AT x = ' .. self.mousePosition.x .. ' y = ' .. self.mousePosition.y)
			self.startPoint.x = self.mousePosition.x
			self.startPoint.y = self.mousePosition.y
			msg.post('/FlySwapForce', 'SHOW')
			msg.post('/FlySwapForce', 'SET_POSITION', {pos = self.startPoint})
			self.calculateStarted = true
		elseif action.released and self.calculateStarted then 
			print('RELEASED AT x = ' .. self.mousePosition.x .. ' y = ' .. self.mousePosition.y)
			self.finishPoint.x = self.mousePosition.x
			self.finishPoint.y = self.mousePosition.y
			self.calculateStarted = false
			releaseMouse(self)
		end
	end


	if action_id == ACTION_GENERATE and action.pressed then 
		-- local coord = vmath.vector3(action.x, action.y, 0)
		-- gui.set_position(self.swatPoint, coord)
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
